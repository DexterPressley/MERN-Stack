openapi: 3.0.3
info:
  title: Nutrition Tracker API
  description: >
    RESTful API for nutrition tracking application with user management, 
    food library with macronutrients, daily entries with meal types, and calorie/macro tracking.
    
    
    Data Model: User has many Days, Day has many Entries, Entry references one Food and has a MealType.
    
    
    Authentication: Most endpoints require a JWT token in the Authorization header (Bearer token format).
    
    
    Token Refresh: All protected endpoints return a refreshed token in the X-Refreshed-Token response header.
  version: 2.0.0
  contact:
    name: API Support
    email: de225789@ucf.edu

servers:
  - url: http://localhost:5000/api
    description: Local development server
  - url: https://colorsdigitalocean.xyz/api
    description: Production server

tags:
  - name: Authentication
    description: User registration and login
  - name: User Settings
    description: User preferences, goals, and settings
  - name: Foods
    description: Food library management with macronutrients
  - name: Days
    description: Daily tracking records
  - name: Entries
    description: Food entries within days with meal types

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with hashed password and default macro goals
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                username:
                  type: string
                  example: johndoe
                  description: Must be unique, will be converted to lowercase
                email:
                  type: string
                  format: email
                  example: john@example.com
                  description: Must be unique, will be converted to lowercase
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: password123
      responses:
        '201':
          description: User registered successfully with default goals
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  userId:
                    type: integer
                    example: 1
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  userId:
                    type: integer
                    example: 1
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: Doe
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/calorie-goal:
    patch:
      tags:
        - User Settings
      summary: Update calorie goal
      description: Update the user's daily calorie target
      operationId: updateCalorieGoal
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - calorieGoal
              properties:
                calorieGoal:
                  type: integer
                  minimum: 0
                  example: 2500
                  description: Daily calorie goal in kcal
      responses:
        '200':
          description: Calorie goal updated successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
              description: Refreshed JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Calorie goal updated successfully
                  calorieGoal:
                    type: integer
                    example: 2500
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/macro-goals:
    patch:
      tags:
        - User Settings
      summary: Update macro goals
      description: Update the user's daily protein, carbs, and/or fat targets
      operationId: updateMacroGoals
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                proteinGoal:
                  type: integer
                  minimum: 0
                  example: 150
                  description: Daily protein goal in grams
                carbsGoal:
                  type: integer
                  minimum: 0
                  example: 200
                  description: Daily carbohydrate goal in grams
                fatGoal:
                  type: integer
                  minimum: 0
                  example: 65
                  description: Daily fat goal in grams
              description: At least one macro goal must be provided
      responses:
        '200':
          description: Macro goals updated successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Macro goals updated successfully
                  proteinGoal:
                    type: integer
                    example: 150
                  carbsGoal:
                    type: integer
                    example: 200
                  fatGoal:
                    type: integer
                    example: 65
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userId}/rollover-time:
    patch:
      tags:
        - User Settings
      summary: Update day rollover time
      description: Set the time when a new "day" starts (e.g., 3:00 AM for late-night eaters)
      operationId: updateRolloverTime
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - dayRolloverTime
              properties:
                dayRolloverTime:
                  type: string
                  pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
                  example: "03:00"
                  description: Time in HH:MM format (24-hour)
      responses:
        '200':
          description: Rollover time updated successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Day rollover time updated successfully
                  dayRolloverTime:
                    type: string
                    example: "03:00"
        '400':
          description: Invalid time format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/foods:
    get:
      tags:
        - Foods
      summary: Search/list foods
      description: Get all foods for a user with macronutrients, optionally filtered by search term
      operationId: getFoods
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Case-insensitive search term for food name
          example: chicken
      responses:
        '200':
          description: Foods retrieved successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Food'
                  count:
                    type: integer
                    example: 25
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Foods
      summary: Add a new food
      description: Create a new food item with macronutrients in user's library
      operationId: addFood
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - caloriesPerUnit
                - proteinPerUnit
                - carbsPerUnit
                - fatPerUnit
                - unit
              properties:
                name:
                  type: string
                  example: Grilled Chicken Breast
                caloriesPerUnit:
                  type: number
                  format: float
                  minimum: 0
                  example: 165
                  description: Calories per one unit
                proteinPerUnit:
                  type: number
                  format: float
                  minimum: 0
                  example: 31
                  description: Protein in grams per unit
                carbsPerUnit:
                  type: number
                  format: float
                  minimum: 0
                  example: 0
                  description: Carbohydrates in grams per unit
                fatPerUnit:
                  type: number
                  format: float
                  minimum: 0
                  example: 3.6
                  description: Fat in grams per unit
                unit:
                  type: string
                  example: 100g
                  description: Unit of measurement (gram, oz, serving, etc.)
                upc:
                  type: string
                  example: "123456789012"
                  description: Optional UPC barcode
      responses:
        '201':
          description: Food added successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Food added successfully
                  food:
                    $ref: '#/components/schemas/Food'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userId}/foods/{foodId}:
    patch:
      tags:
        - Foods
      summary: Update a food
      description: Update one or more fields of a food item including macronutrients
      operationId: updateFood
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: foodId
          in: path
          required: true
          schema:
            type: integer
          example: 42
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Baked Chicken Breast
                caloriesPerUnit:
                  type: number
                  format: float
                  example: 150
                proteinPerUnit:
                  type: number
                  format: float
                  example: 30
                carbsPerUnit:
                  type: number
                  format: float
                  example: 0
                fatPerUnit:
                  type: number
                  format: float
                  example: 3
                unit:
                  type: string
                  example: 100g
      responses:
        '200':
          description: Food updated successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Food updated successfully
                  food:
                    $ref: '#/components/schemas/Food'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Foods
      summary: Delete a food
      description: Remove a food item from user's library
      operationId: deleteFood
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: foodId
          in: path
          required: true
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Food deleted successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Food deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/days:
    get:
      tags:
        - Days
      summary: Search days
      description: Get days within a date range (or all days if no range specified)
      operationId: getDays
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Start date (inclusive) in YYYY-MM-DD format
          example: "2025-10-01"
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: End date (inclusive) in YYYY-MM-DD format
          example: "2025-10-31"
      responses:
        '200':
          description: Days retrieved successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Day'
                  count:
                    type: integer
                    example: 5
        '400':
          description: Invalid date format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Days
      summary: Add a new day
      description: Create a new day record for tracking (usually done automatically at rollover time)
      operationId: addDay
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
              properties:
                date:
                  type: string
                  format: date
                  example: "2025-10-30"
                  description: Date in YYYY-MM-DD format
      responses:
        '201':
          description: Day added successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Day added successfully
                  day:
                    type: object
                    properties:
                      dayId:
                        type: integer
                        example: 15
                      date:
                        type: string
                        format: date-time
                        example: "2025-10-30T00:00:00.000Z"
        '400':
          description: Invalid date format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Day already exists for this date
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Day already exists for this date
                  dayId:
                    type: integer
                    example: 15

  /users/{userId}/days/{dayId}:
    get:
      tags:
        - Days
      summary: Get a specific day
      description: Retrieve a single day with all its entries (used for day view)
      operationId: getDayById
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: dayId
          in: path
          required: true
          schema:
            type: integer
          example: 15
      responses:
        '200':
          description: Day retrieved successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  day:
                    $ref: '#/components/schemas/Day'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Day not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - Days
      summary: Update a day
      description: Update the date of a day record
      operationId: updateDay
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: dayId
          in: path
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
              properties:
                date:
                  type: string
                  format: date
                  example: "2025-10-31"
      responses:
        '200':
          description: Day updated successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Day updated successfully
                  day:
                    type: object
                    properties:
                      dayId:
                        type: integer
                        example: 15
                      date:
                        type: string
                        format: date-time
        '400':
          description: Invalid date format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Day not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Days
      summary: Delete a day
      description: Remove a day and all its entries
      operationId: deleteDay
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: dayId
          in: path
          required: true
          schema:
            type: integer
          example: 15
      responses:
        '200':
          description: Day deleted successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Day deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Day not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/days/{dayId}/entries:
    post:
      tags:
        - Entries
      summary: Add an entry
      description: Add a food entry to a day with meal type (via barcode scan or manual input)
      operationId: addEntry
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: dayId
          in: path
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - foodId
                - amount
                - mealType
              properties:
                foodId:
                  type: integer
                  example: 42
                  description: ID of the food being logged
                amount:
                  type: number
                  format: float
                  minimum: 0
                  example: 2.5
                  description: Quantity of units consumed
                mealType:
                  type: string
                  enum: [Breakfast, Lunch, Dinner, Snack]
                  example: Lunch
                  description: Type of meal this entry belongs to
      responses:
        '201':
          description: Entry added successfully with enriched food details
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Entry added successfully
                  entry:
                    $ref: '#/components/schemas/EnrichedEntry'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Day or Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/days/{dayId}/entries/{entryId}:
    patch:
      tags:
        - Entries
      summary: Update an entry
      description: Update the food, amount, or meal type of an entry
      operationId: updateEntry
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: dayId
          in: path
          required: true
          schema:
            type: integer
          example: 15
        - name: entryId
          in: path
          required: true
          schema:
            type: string
          description: MongoDB ObjectId
          example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                foodId:
                  type: integer
                  example: 43
                amount:
                  type: number
                  format: float
                  example: 3.0
                mealType:
                  type: string
                  enum: [Breakfast, Lunch, Dinner, Snack]
                  example: Dinner
      responses:
        '200':
          description: Entry updated successfully with enriched food details
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Entry updated successfully
                  entry:
                    $ref: '#/components/schemas/EnrichedEntry'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Day, Entry, or Food not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Entries
      summary: Delete an entry
      description: Remove a food entry from a day
      operationId: deleteEntry
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 1
        - name: dayId
          in: path
          required: true
          schema:
            type: integer
          example: 15
        - name: entryId
          in: path
          required: true
          schema:
            type: string
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Entry deleted successfully
          headers:
            X-Refreshed-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Entry deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Day or Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-30T12:34:56.789Z"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /login endpoint

  schemas:
    Food:
      type: object
      properties:
        foodId:
          type: integer
          example: 42
        name:
          type: string
          example: Grilled Chicken Breast
        caloriesPerUnit:
          type: number
          format: float
          example: 165
        proteinPerUnit:
          type: number
          format: float
          example: 31
          description: Protein in grams per unit
        carbsPerUnit:
          type: number
          format: float
          example: 0
          description: Carbohydrates in grams per unit
        fatPerUnit:
          type: number
          format: float
          example: 3.6
          description: Fat in grams per unit
        unit:
          type: string
          example: 100g
        upc:
          type: string
          nullable: true
          example: "123456789012"

    Entry:
      type: object
      properties:
        entryId:
          type: string
          example: "507f1f77bcf86cd799439011"
          description: MongoDB ObjectId
        foodId:
          type: integer
          example: 42
        amount:
          type: number
          format: float
          example: 2.5
        mealType:
          type: string
          enum: [Breakfast, Lunch, Dinner, Snack]
          example: Lunch
        timestamp:
          type: string
          format: date-time
          example: "2025-10-30T14:23:00.000Z"

    EnrichedEntry:
      type: object
      description: Entry with calculated macros and food details for Flutter frontend
      properties:
        entryId:
          type: string
          example: "507f1f77bcf86cd799439011"
        foodId:
          type: integer
          example: 42
        foodName:
          type: string
          example: Grilled Chicken Breast
        amount:
          type: number
          format: float
          example: 2.5
        mealType:
          type: string
          enum: [Breakfast, Lunch, Dinner, Snack]
          example: Lunch
        calories:
          type: integer
          example: 413
          description: Total calories (caloriesPerUnit * amount), rounded
        protein:
          type: integer
          example: 78
          description: Total protein in grams (proteinPerUnit * amount), rounded
        carbs:
          type: integer
          example: 0
          description: Total carbs in grams (carbsPerUnit * amount), rounded
        fat:
          type: integer
          example: 9
          description: Total fat in grams (fatPerUnit * amount), rounded
        timestamp:
          type: string
          format: date-time
          example: "2025-10-30T14:23:00.000Z"

    Day:
      type: object
      properties:
        dayId:
          type: integer
          example: 15
        date:
          type: string
          format: date-time
          example: "2025-10-30T00:00:00.000Z"
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
          description: Array of food entries for this day

    Error:
      type: object
      properties:
        error:
          type: string
          example: Validation error message
        success:
          type: boolean
          example: false

  responses:
    UnauthorizedError:
      description: Authentication token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: The JWT is no longer valid